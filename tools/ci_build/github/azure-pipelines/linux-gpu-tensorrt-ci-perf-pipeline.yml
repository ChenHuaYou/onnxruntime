
parameters:

- name: BuildORT
  displayName: Build ORT
  type: boolean
  default: true

- name: PostToDashboard
  displayName: Post to Dashboard
  type: boolean
  default: true

- name: RunTrtContainer
  displayName: Run in TRT Container (or set trtContainer Variable)
  type: boolean
  default: true

- name: RunMachine
  displayName: Run on Machine
  type: boolean
  default: false

- name: RunCustom
  displayName: Select Custom Versions Below
  type: boolean
  default: false

- name: TrtVersion
  displayName: TensorRT Version
  type: string
  default: 7.2.3.4
  values:
  - 7.2.3.4
  - 7.1.3.4

- name: CudaVersion
  displayName: CUDA Version
  type: string
  default: 11.1
  values:
  - 11.1
  - 11.0
  - 10.2

- name: ConfigureEPs
  displayName: Configure EPs (set epList variable - separate by spaces)
  type: boolean
  default: false

- name: PublishWheel
  displayName: Publish Wheel 
  type: boolean
  default: true

- name: ModelGroups
  type: object
  default: 
    - "onnx-zoo-models"
    - "partner-models"

jobs: 
- job: Linux_CI_GPU_TENSORRT_PERF
  pool:
    name: Linux-GPU-TensorRT-Perf 
    demands:
    - Agent.Name -equals K8S-HVZD1T2CL-HVZD1T2

  variables:
    - name: build_args
      ${{ if eq(parameters.RunTrtContainer, true) }}:
        value: Dockerfile.tensorrt-perf -t $(trtContainer)
      ${{ if eq(parameters.RunCustom, true) }}: 
        value: Dockerfile.custom-trt-perf -c ${{ parameters.CudaVersion }} -t ${{ parameters.TrtVersion }}
    - name: environment
      ${{ if ne(parameters.RunMachine, true) }}:
        value: docker.sh -d ort-$(branch) -p $(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf 
      ${{ if eq(parameters.RunMachine, true) }}:
        value: machine.sh
    - name: with_arguments
      value: $(environment) -e "$(epList)"
  timeoutInMinutes: 3000 
      
  steps:

    - ${{ if eq(parameters.BuildORT, true) }}:

      - ${{ if ne(parameters.RunMachine, true) }}:
        - script: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build/build_image.sh -p $(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build/$(build_args) -b $(branch) -i ort-$(branch)'
          displayName: 'Build latest ORT Images'
          workingDirectory: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build'
          
      - ${{ if eq(parameters.RunMachine, true) }}:
        - script: 'python3 $(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build/ort_build_latest.py -b $(branch) -c /usr/local/cuda -o ~/repos/onnxruntime/ -t ${{ parameters.TrtVersion }}'
          displayName: 'Build latest ORT'
          workingDirectory: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build'
        
    - ${{ if eq(parameters.PublishWheel, true) }}:
    
      - script: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build/copy_wheel.sh -t $(trtContainer)'
        displayName: 'Copy Wheel from Docker'
        workingDirectory: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build'
    
      - script: 'OUTPUT=$(ls dist) && az storage blob upload --account-name anubiscustomerstorage  --account-key $(account-key) --container-name upload --file $(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/dist/*.whl --name ort-trt-ep/$OUTPUT'
        displayName: 'Upload Wheel File'
        workingDirectory: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/'

      - task: PowerShell@2
        inputs:
          filePath: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/build/start_job.ps1'
          arguments: '-file_folder $(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/dist -account_key $(account-key)'
        displayName: 'Start Anubis Job'

    - ${{ each option in parameters.ModelGroups }}:
      - script: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/run_perf_$(with_arguments) -o ${{option}} -m $(${{option}})'
        displayName: '${{option}} perf'
        workingDirectory: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/'

    - ${{ if not(eq(length(parameters.ModelGroups), 0)) }}:
      - script: 'mkdir $(Build.SourcesDirectory)/Artifact && cp -r $(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/result/ $(Build.SourcesDirectory)/Artifact'
        displayName: 'Prepare Artifacts'
        workingDirectory: '$(Build.SourcesDirectory)/onnxruntime/python/tools/tensorrt/perf/'

      - task: PublishBuildArtifacts@1
        inputs:
          pathtoPublish: '$(Build.SourcesDirectory)/Artifact'
          artifactName: 'result-$(Build.BuildNumber)'

    - script: sudo rm -rf $(Agent.BuildDirectory)
      displayName: Clean build files (POSIX)
      condition: not(eq(variables['Agent.OS'], 'Windows_NT')) # and always()
      continueOnError: true  # continuing on error for this step, since linux build folder is somehow getting permission issue
  
- job: Linux_CI_GPU_TENSORRT_PERF_DASHBOARD
  dependsOn: Linux_CI_GPU_TENSORRT_PERF
  pool:
    name: Linux-GPU-TensorRT-Perf 
    demands:
    - Agent.Name -equals cus-cpu-52wc
  
  steps: 
  - ${{ if eq(parameters.PostToDashboard, true) }}:
    # - task: DownloadPipelineArtifact@2
    #   inputs:
    #     artifact: 'result-$(Build.BuildNumber)'

    # - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
    #   displayName: Add conda to PATH

    - script: 'where conda'
    - script: 'conda activate clean && echo %CONDA_DEFAULT_ENV%'

    - script: 'conda activate clean && python $(Build.SourcesDirectory)\onnxruntime\python\tools\tensorrt\perf\post.py -r $(Pipeline.Workspace)/result -c $(Build.SourceVersion) -u "https://dev.azure.com/onnxruntime/onnxruntime/_build/results?buildId=$(Build.BuildId)" ' 
      displayName: 'Post to Dashboard'
      env:
        DASHBOARD_MYSQL_ORT_PASSWORD: $(dashboard-mysql-ort-password)

  - script: rd /S /Q $(Agent.BuildDirectory)
    displayName: Clean build files (Windows)
    condition: eq(variables['Agent.OS'], 'Windows_NT') # and always()